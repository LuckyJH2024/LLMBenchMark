[
    {
        "prompt": "Problem: Write a function to sum all even numbers in a list.\nStarter Code: def sum_even(numbers):\nComplete the code:",
        "response": " Here is the completed function:\n\n```python\ndef sum_even(numbers):\n    total = 0\n    for number in numbers:\n        if number % 2 == 0:\n            total += number\n    return total\n```\n\nThis function initializes a variable `total` to 0. Then it iterates over each element in the input list `numbers`. If the current number is even (i.e., its remainder when divided by 2 is 0), it adds that number to `total`. Finally, the function returns the total sum of all even numbers found in the list.",
        "duration": 3.4041316509246826,
        "memory_usage": 492888064,
        "score": 0.8373
    },
    {
        "prompt": "Problem: Write a function to check if a string is a palindrome.\nStarter Code: def is_palindrome(text):\nComplete the code:",
        "response": " Here's the completed code for checking if a string is a palindrome:\n\n```python\ndef is_palindrome(text):\n    text = text.lower()  # Convert the string to lowercase\n    reversed_text = text[::-1]  # Reverse the input string\n\n    if text == reversed_text:\n        return True\n    else:\n        return False\n```\n\nNow you can test your function by calling it with a palindrome string, for example:\n\n```python\nprint(is_palindrome('racecar'))  # Output: True\n```",
        "duration": 3.2938742637634277,
        "memory_usage": 494592000,
        "score": 0.7737
    },
    {
        "prompt": "Problem: Implement a recursive function to calculate factorial.\nStarter Code: def factorial(n):\nComplete the code:",
        "response": " To complete the function, you need to implement the recursive logic for calculating factorials. The factorial of a number `n` is calculated as the product of all positive integers less than or equal to `n`. Here's how we can implement this in Python using recursion:\n\n```python\ndef factorial(n):\n    if n == 0:  # base case, when n = 0, return 1\n        return 1\n    else:      # recursive case, multiply the current number by the factorial of (n - 1)\n        return n * factorial(n - 1)\n```\n\nThis function first checks if `n` is equal to 0 (base case), in which case it returns 1. If not, it calculates the factorial of `n - 1` and multiplies it by `n`. The recursion continues until it reaches the base case.",
        "duration": 3.9162139892578125,
        "memory_usage": 496099328,
        "score": 0.7977
    }
]